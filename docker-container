		Docker 入门 

第一步:查看docker程序是否正常工作
	命令:docker info
该命令会返回所有容器和镜像(镜像即是Docker用来构建容器的"构建块")的数量,Docker使用的执行驱动和存储驱动(execution and storage driver),以及Docker的基本配置;


第二步:创建第一个容器
	命令:docker run -i -t ubuntu /bin/bash
首先,告诉Docker执行docker run 命令 ,并指定了-i和-t两个命令行参数. -i标志保证容器中的STDIN是开启的 -t 它告诉Docker要为创建的容器分配一个伪tty终端； 接下来,告诉Docker基于什么镜像来创建容器,实例中使用ubuntu镜像 接下来本例中我们在容器运行/bin/bash命令启动一个Bash shell.

第三步:使用第一个容器
	1.检查容器的主机名   	hostname
	2.检查容器的    	cat  /etc/hosts文件
	3.检查容器的接口  	ip a
	4.检查容器的进程	ps -aux
	5.在容器中安装软件包    apt-get update && apt-get install vim

退出容器 : exit; 回到宿机的命令提示符


查看当前系统中容器的列表
	docker ps -a :默认情况下,执行docker ps 命令时,只能看到正在运行的容器,-a标志 列出所有的容器
	docker ps -l  指定标志为-l 列出最后一次运行的容器,包括正在运行和已经停止的.


	


容器命名
	Docker会我们创建的每一个容器自动生成 一个随机的名称,如果想要指定容器名称,可以使用--name标志来实现
	给容器命令:docker run --name bob_the_container -i -t ubuntu /bin/bash
	一个合法的容器名称包含以下字段:小写字母a-z,大写字母 A-Z 数字 0-9 下划线 圆点 横线 [a-zA-Z0-9_.-]


	启动已经停止运行的容器
		docker start bob_the_container  除了容器名称,也可以使用容器ID
		
		docker start aa3f365f0f4e       通过ID容器已经停止运行的容器



	重新附着容器上
		Docker容器重新启动的时候,会沿用docker run 命令时指定的参数来运行,我可以使用docker attach命令
	重新附着到该容器的 会话上.
		docker attach  bob_the_container     通过名称附着到容器的会话
		docker attach  aa3f365f0f4e          通过ID附着到容器


创建守护式容器(长期运行的容器)
	
	docker run --name daemon_dave -d ubuntu /bin/sh -c "while true;do echo hello world;sleep 1;done"
	上面我们使用docker run 命令使用-d参数,因此Docker会将容器放到后台运行.还在容器运行的命令行中使用了一个while循环,该循环会一直打印hello world ,直到容器或其进程停止运行.该容器执行时直接返回一个容器ID,主机的控制台不会附着到shell会话上.


	获取守护式容器的日志:
		docker logs daemon_dave  :Docker会输出最后几条日志项并返回
		docker logs -f daemon_dave	:命令后使用-f参数来监控Docker日志  Ctrl+C退出日志跟踪
		docker logs -ft  daemon_dave    :命令后使用-t参数会为每条日志添加时间戳
	
	查看守护式容器的进程:
		docker top  daemon_dave      	:该命令执行后可以看到容器内的所有进程
	

在容器内部运行进程

	在容器内运行的进程有两种类型:后台任务和交互式任务.后台任务在容器内运行且没有交互需求,而交互任务则保持在前台运行.

	在容器中运行后台任务
		docker exec -d daemon_dave touch /etc/new_config_file
这里的-d标志表明需要运行一个后台进程,-d标志后,指定的是要在内部执行命令的容器名称以及要执行的命令,上面的命令会在daemon_dave容器内创建一个名为new_config_file的文件


	在容器内运行交互命令
		docker exec -t -i daemon_dave /bin/bash
和运行交互容器时一样,这里的-t和-i标志为我们执行的进程创建了TTY并捕捉STDIN,接着我们指定了要在内部执行这个命令的容器名称以及要执行的命令.上面的命令就是在daemon_dave容器中创建一个新的bash会话.

	

停止守护式容器
	
	docker stop daemon_dave        ====>停止正在运行的Docker容器
	
	docker stop c2c4e57c12c4       ====>通过容器ID停止正在运功的容器

注意:docker stop 命令会向Docekr容器进程发送SIGTERM信号.如果你想快速停止某个容器,也可以使用docker kill命令来向容器进程发送SIGKILL信号   docker ps -n x ,该命令会显示最后x个容器,无论这些容器正在运行还是已经停止.



自动重启容器

	如果由于某种错误导致容器停止运行,我们通过--restart标志,让Docekr自动重启该容器.--restart标准检查容器的退出代码,并据此来决定是否要重启容器.默认的行为是Docker不会重启容器

	docker run --restart=always --name daemon_dave -d ubuntu /bin/sh  -c "while true;do echo hello world;sleep 1;done"
在本例中--restart标志被设置为always,无论容器的退出代码是什么,Docker都会自动重启容器,除了always,还可以设置为on-failure,这样,当容器的退出代码非0值的时候,才会自启动,还可以指定次数
	
	docker run --restart=on-failure:3 --name daemon_dave -d ubuntu /bin/sh -c "whil true;do echo hello world;sleep 1;done"           为on-failure指定count参数
这样,当容器退出代码为非0时,Docker会尝试自动重启该容器,最多重启3次.



深入容器
	使用docker inspect来获取更多的容器信息.
	
	docker inspect daemon_dave
docker inspect 命令会对容器进行详细的检查,然后返回其配置信息,包括名称,命令,网络配置以及很多有用的数据 可以使用-f或者--format标志来选定查看的结果.  提示: --format 或者-f标志远非看上去那么简单,该标志实际上支持完整的Go语言模板

	docker inspect --format='{{.State.Runing}}' daemon_dave  ===> 获取容器状态    有选择地获取容器信息 
	docker inspect --format='{{.NetworkSettings.IPAddress}}' daemon_dave   ===>查看容器的IP地址

	
	docker inspect --format='{{.State.Runing}}' daemon_dave demo ===>获取容器daemon_dave和容器demod的状态

除了查看容器,还可以浏览/var/lib/docker目录来深入了解Docker的工作原理.该目录中存放Docker镜像,容器以及容器配置.所有容器都保存在/var/lib/docker/containers目录下



删除容器
	docker rm daemon_dave  删除容器,注意运行中的Docker容器是无法删除的,必须通过docker stop 或 docker kill命令停止容器才能将其删除

	docker rm `docker ps -a -q`      :删除所有容器
-a标志代表列出所有(all)容器,-q标志只需要返回容器的ID不会返回其它信息.这样我们获取到容器id列表,并传给docker rm 命令,从而达到删除所有容器的目的. 






































		































