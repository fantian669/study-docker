该学习笔记 根据 http://www.cnblogs.com/CloudMan6/p/6693772.html 记录自身认为的知识点
感谢 CloudMan 提供的原创《每天5分钟玩转OpenStack》教程

What - 什么是容器？
	容器是一种轻量级、可移植、自包含的软件打包技术，是应用程序可以在几乎任何地方以相同的方式运行。

容器与虚拟机
	容器组成
		应用程序本身
		依赖：比如应用程序需要的库或其他软件

容器在Host 操作系统的用户空间中运行，与操作系统其他进程隔离
传统的虚拟化技术，比如VMWare,KVM,Xen,目标是创建完整的虚拟机，为了运行应用，除了部署应用本身及其依赖，还得安装整个操作系统


Why - 为什么需要容器？
	容器使如软件具备了超强的可移植能力


Docker 的特性
我们可以看看集装箱思想是如何与 Docker 各种特性相对应的。

特性	     集装箱	             Docker
打包对象	几乎任何货物			任何软件及其依赖
硬件依赖	标准形状和接口允许集装箱被装卸到各种交通工具，整个运输过程无需打开			容器无需修改便可运行在几乎所有的平台上 -- 虚拟机、物理机、公有云、私有云
隔离性	    集装箱可以重叠起来一起运输，香蕉再也不会被铁桶压烂了			资源、网络、库都是隔离的，不会出现依赖问题
自动化	    标准接口使集装箱很容易自动装卸和移动			提供 run, start, stop 等标准化操作，非常适合自动化
高效性	    无需开箱，可在各种交通工具间快速搬运			轻量级，能够快速启动和迁移
职责分工	货主只需考虑把什么放到集装箱里；承运方只需关心怎样运输集装箱			开发人员只需考虑怎么写代码；运维人员只需关心如何配置基础环境



How - 容器是如何工作的？

Docker 采用的是 Client/Server 架构。客户端向服务器发送请求，服务器负责构建、运行和分发容器。客户端和服务器可以运行在同一个 Host 上，客户端也可以通过 socket 或 REST API 与远程的服务器通信。

运行一个 http容器
	1.Docker 客户端执行 docker run 命令
	2.Docker daemon 发现本地没有httpd镜像
	3.daemon从Docker Hub下载镜像
	4.下载完成，镜像httpd被保存到本地
	5.Docker daemon启动容器


镜像是Docker 容器的基石，容器是镜像的运行实例，有了镜像才能启动容器。
	
	镜像的内部结构
		Dockerfile 是镜像的描述文件，定义了如何构建Docker镜像.Dockerfile的语法简洁且可读性强
			hello-world 的 Dockerfile内容如下：
			FROM scratch
			COPY hello /
			CMD ["/hello"]
	只有短短三条指令
		1.FROM scratch
			此镜像是从白手起家，从0开始构建
		2.COPY hello /
			将文件"hello"复制到镜像的根目录
		3.CMD ["/hello"]
			容器启动时，执行/hello


	base 镜像
		1.不依赖其它镜像，从scratch构建
		2.其它镜像可以以它为基础进行扩展
	故能称为base镜像的通常都是各种Linux发行版的Docker镜像，比如Ubuntu,Debian,Centos等