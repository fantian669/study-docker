	使用Docker构建服务

	上一章介绍如何利用Docker来使用容器在本地开发工作流和持续集成环境中方便快捷的进行测试.本章继续探索如何利用Docker来运行生产环境的服务.

	首先会构建一个简单的应用,然后会构建一个更复杂的多容器应用.这些应用会展示,如何利用连接和卷之类的Docker特性来组合并管理运行于Docker中的应用.

	1.构建第一个应用

	要构建的第一个应用是使用Jekyll框架的自定义网站.我们会构建以下两个镜像.

一个镜像安装了Jekyll及其他用于构建Jekyll网站的必要的软件包

一个镜像通过Apache来让Jekyll网站工作起来
	计划在启动容器时,通过构建一个新的Jekyll网站来事项自服务.工作流程如下:

	创建Jekyll基础镜像和Apache镜像(只需要构建间一次).
	从Jekyll镜像创建一个容器,这个容器存放通过卷挂载的网站源代码.
	从Apache镜像创建一个容器,这个容器利用包含编译后的网站的卷,并为其服务.
	在网站需要更新你时,清理并重复上面的步骤.
可以把这个例子看做一个多主机站点最简单的方法

	1.1 Jekyll基础镜像
	
Jekyll基础镜像的Dockerfile.创建一个新的目录和一个空的Dockerfile.代码如下: 

	mkdir jekyll && cd jekyll && vim Dockerfile            ===>创建Jekyll Dockerfile

	FROM ubuntu
	MAINTAINER rnjack998@gmail.com
	ENV REFRESHED_AT 2016-11-03

	RUN apt-get -yqq update
	RUN apt-get -yqq install ruby ruby-dev make nodejs		
	RUN gem install --no-rdoc --no-ri jekyll
	
	VOLUME /data
	VOLUME /var/www/html
	WORKDIR  /data
	ENTRYPOINT [ "jekyll", "build", "--destination=/var/www/html"]
这个Dockerfile使用了第3章里的模板作为基础.镜像基于Ubuntu.并且安装了Ruby和支持Jekyll的报.然后我们使用了VOLUME指令创建了以下两个卷.
	
	/dat/,用来存放网站的源代码.
	/var/www/html/ ,用来存放编译后的Jekyll网站码.
然后我们需要将工作目录设置到/data/,并通过ENTRYPOINT指令指定自动构建的命令,这个命令将会将工作目录/data/中所有的Jekyll网站代码构建到/var/www/html目录中.

	1.2构建Jekyll基础镜像    

通过Dockerfile,可以使用Docker build命令构建出可以启动的容器的镜像.
	docker build -t rnjack/jekyll .          ===>构建Jekll镜像

	1.3 Apache镜像

构建第二个镜像,一个用来架构新网站的Apache服务器,我们先创建一个新目录和一个空的Dockerfile. 创建Apache Dockerfile
	mkdir apache && cd apache && vim Dockerfile

Jekyll Apache的Dockerfile

	FROM ubuntu
	MAINTAINER rnjack <rnjack996@gmail.com>
	ENV REFRESHED_AT 2016-11-05
	
	RUN apt-get -yqq update
	RUN apt-get -yqq install apache2

	
        VOLUME ["/var/www/html"]
	WORKDIR  /var/www/html
	
	ENV APACHE_RUN_USER  www-data
	ENV APACHE_RUN_GROUP www-data
	ENV APACHE_LOG_DIR  /var/log/apache2
	ENV APACHE_PID_FILE /var/run/apache2.pid
	ENV APACHE_RUN_DIR /var/run/apache2
	ENV APACHE_LOG_DIR /var/lock/apache2


	RUN mkdir -p $APACHE_RUN_DIR  $APACHE_LOCK_DIR $APACHE_LOG_DIR
	EXPOSE 80

	ENTRYPOINT [ "/usr/sbin/apache2" ]
	CMD ["-D", "FOREGROUND"]

这个镜像也是基于Ubuntu的,并安装了Apache.然后我们使用VOLUME指令创建一个卷,即/var/www/html/,用来存放编译后的Jekyll网站.然后将/var/www/html设为工作目录.

我们使用ENV指令设置了一些必要的环境变量,创建了必要的目录.并且使用EXPOSE公开80端口.最后指定ENTRYPOINT和 CMD指令组合来在容器启动时默认运行Apache.

	1.4  构建Jekyll Apache镜像
	
	docker build -t rnjack/apache .       ===>构建Jekyll Apache镜像

这样就构建了名为rnjack/apche ,的新镜像.这就是将要使用的Apache镜像.可以是使用docker images命令来查看这个新镜像.
	
	1.5 启动Jekyll网站

	Jekyll:安装了Ruby及其他必备软件包的Jekyll镜像.
	Apache:通过Apache Web服务器来让Jekyll网站工作起来的镜像.
我们从使用docker run 命令来创建一个新的Jekyll容器开始我们的网站.我们将启动容器,并构建我们的网站.

然后我们需要下一些源代码.现把示例Jekyll博客复制到$HOME目录(例子中/home/james)中.创建示例Jekyll博客
	cd $HOME  
	git clone https://github.com/jamtur01/james_blog.git

在这个目录下可以看到一个启动Twitter Bootstrap的最基础的Jekyll博客.如果想用这个博客可以修改_config.yml文件和主题,以符合你的要求.

现在在Jekyll容器里使用这个示例数据.
	docker run -v /home/james/james_blog:/data/ --name james_blog rnjack/jekyll

我们启动了一个 叫做james_blog的新容器.把本地的james_blog目录作为/data/卷挂载到容器里.容器已经拿到网站的源代码,并将其构建到已编译的网站,存放到 /var/www/html/目录.

   卷是在一个或多个容器中特殊指定的目录,卷会绕过联合文件系统,为持久化数据和共享数据提供几个有用的特性.

	卷可以在容器间共享和重用
	共享卷时不一定要运行相应的容器
	对卷的修改会直接在卷上反映出来
	更新镜像时不会包含对卷的修改
	卷会一直存在,知道没有容器使用它们.
利用卷,可以在不用提交镜像修改的情况霞,向镜像里加入数据(如源代码,数据或者其他内容),并且可以在容器间共享这些数据.
卷在Docker宿主机的/var/lib/docker/volumes 目录中,可以通过docker inspect 命令查看某个卷的具体位置,比如docker inspect -f "{{ .Volumes }}".所以,如果想在另一个容器里使用/var/www/html/卷里编译好的网站,可以创建一个新的连接到这个卷的容器.

	docker run -d -P --volumes-from james_blog rnjack/apache     创建Apache容器.

这看上去和典型的docker run 很像,只是使用了一个新标志 --volumes-from.标志--volumes-from把指定容器了所有卷都加入新创建的容器里.这意味着,Apache容器可以访问之前创建的james_blog容器里/var/www/html 卷中存放的编译后的Jekyll网站.即便james_blog容器没有运行,Apache容器也可以访问这个卷.想想这个特性之一.不过容器本身必须存在.如果用docker rm命令删除james_blog容器,那么这个卷和卷里的内容就不存在了.























	



















 		










	










